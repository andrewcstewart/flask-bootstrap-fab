
var m = [80, 160, 0, 160], // top right bottom left
    w = 1280 - m[1] - m[3], // width
    h = 800 - m[0] - m[2], // height
    x = d3.scale.linear().range([0, w]),
    y = 25, // bar height
    z = d3.scale.ordinal().range(["steelblue", "#aaa"]); // bar color

var hierarchy = d3.layout.partition()
    .value(function(d) { return d.size; });

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("top");

var svg = d3.select("body").append("svg:svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
    .append("svg:g")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

svg.append("svg:rect")
    .attr("class", "background")
    .attr("width", w)
    .attr("height", h)
    .on("click", up);

svg.append("svg:g")
    .attr("class", "x axis");

svg.append("svg:g")
    .attr("class", "y axis")
    .append("svg:line")
    .attr("y1", "100%");

d3.json("flare.json", function(root) {
	hierarchy.nodes(root);
	x.domain([0, root.value]).nice();
	down(root, 0);
    });

function down(d, i) {
    if (!d.children || this.__transition__) return;
    var duration = d3.event && d3.event.altKey ? 7500 : 750,
	delay = duration / d.children.length;

    // Mark any currently-displayed bars as exiting.
    var exit = svg.selectAll(".enter").attr("class", "exit");

    // Entering nodes immediately obscure the clicked-on bar, so hide it.
    exit.selectAll("rect").filter(function(p) { return p === d; })
	.style("fill-opacity", 1e-6);

    // Enter the new bars for the clicked-on data.
    // Per above, entering bars are immediately visible.
    var enter = bar(d)
	.attr("transform", stack(i))
	.style("opacity", 1);

    // Have the text fade-in, even though the bars are visible.
    // Color the bars as parents; they will fade to children if appropriate.
    enter.select("text").style("fill-opacity", 1e-6);
    enter.select("rect").style("fill", z(true));

    // Update the x-scale domain.
    x.domain([0, d3.max(d.children, function(d) { return d.value; })]).nice();

    // Update the x-axis.
    svg.selectAll(".x.axis").transition()
	.duration(duration)
	.call(xAxis);

    // Transition entering bars to their new position.
    var enterTransition = enter.transition()
	.duration(duration)
	.delay(function(d, i) { return i * delay; })
	.attr("transform", function(d, i) { return "translate(0," + y * i * 1.2 + ")"; });

    // Transition entering text.
    enterTransition.select("text").style("fill-opacity", 1);

    // Transition entering rects to the new x-scale.
    enterTransition.select("rect")
	.attr("width", function(d) { return x(d.value); })
	.style("fill", function(d) { return z(!!d.children); });

    // Transition exiting bars to fade out.
    var exitTransition = exit.transition()
	.duration(duration)
	.style("opacity", 1e-6)
	.remove();

    // Transition exiting bars to the new x-scale.
    exitTransition.selectAll("rect").attr("width", function(d) { return x(d.value); });

    // Rebind the current node to the background.
    svg.select(".background").data([d]).transition().duration(duration * 2); d.index = i;
}

function up(d) {
    if (!d.parent || this.__transition__) return;
    var duration = d3.event && d3.event.altKey ? 7500 : 750,
	delay = duration / d.children.length;

    // Mark any currently-displayed bars as exiting.
    var exit = svg.selectAll(".enter").attr("class", "exit");

    // Enter the new bars for the clicked-on data's parent.
    var enter = bar(d.parent)
	.attr("transform", function(d, i) { return "translate(0," + y * i * 1.2 + ")"; })
	.style("opacity", 1e-6);

    // Color the bars as appropriate.
    // Exiting nodes will obscure the parent bar, so hide it.
    enter.select("rect")
	.style("fill", function(d) { return z(!!d.children); })
	.filter(function(p) { return p === d; })
	.style("fill-opacity", 1e-6);

    // Update the x-scale domain.
    x.domain([0, d3.max(d.parent.children, function(d) { return d.value; })]).nice();

    // Update the x-axis.
    svg.selectAll(".x.axis").transition()
	.duration(duration * 2)
	.call(xAxis);

    // Transition entering bars to fade in over the full duration.
    var enterTransition = enter.transition()
	.duration(duration * 2)
	.style("opacity", 1);

    // Transition entering rects to the new x-scale.
    // When the entering parent rect is done, make it visible!
    enterTransition.select("rect")
	.attr("width", function(d) { return x(d.value); })
	.each("end", function(p) { if (p ==  var exitTransition = exit.selectAll("g".style("filthe last child has finished transitioning.
  exit.transition().d
      .style("cursor", funon(d) { return d.name; });

  bar.append("svg:rect")
  