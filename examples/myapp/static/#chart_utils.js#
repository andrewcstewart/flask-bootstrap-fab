if (!window.ChartUtils){
    /**
       Module ChartUtils
        
        Extends Object class with several useful methods to allow better encapsulation mechanisms.
        Exposes a few utility functions
        
        @module ChartUtils       
        
    */
    var ChartUtils = (function(){
	    "use strict";

	    //Add a init method to Object
	    if (!Object.hasOwnProperty("init")) {
        
		/** 
                                Creates an object inheriting from a given prototype and then, if required, 
                                inits it with a list of properties tha can be passed as its second argument.
                                
                                @method init
                                @for Object
                                @param {Object} proto  The protetype to inherit from;
                                @param {Object} [properties] A dictionary of key-value properties to be used for the new object's initialization;
                                @return {Object} The newly created object.
                                @throws Error, if the wrong number of arguments is passed.
		*/
		Object.init = function (proto, properties){
		    if (arguments.length !== 2){
			throw new Error('Object.init implementation only accepts 2 parameters.');
		    }
		    var key, new_obj = Object.create(proto);
		    
		    if (properties){
			for (key in properties){
			    if (properties.hasHownProperty(key)){
				Object.defineProperty(new_obj, key, {
					value: properties[key],
					    writable: true,
					    enumerable: true,
					    configurable: false
					    }
				    );
			    }
			}
		    }
		    return new_obj;
		};
	    }
	    
	    if (Object.prototype.clear){
		/**
                                            Deletes every property from an object
                                            
                                            @method clear
                                            @for Object
                                            @chainable
                                            @return {Object} The same object on whom this method is called.
		*/
		Object.prototype.clear = function(){
		    for (var prop in this){
			if (this.hasOwnProperty(prop)){
			    delete this[prop]; 
			}
		    }
		    return this;
		};
		
	    }

	    if (!Object.prototype.createSafeProxy){
		/** createSafeProxy()
                                                
                                                    Creates and returns a safe proxy for the object passed, 
                                                    that will wrap around it and expose only those methods
                                                    marked as public (i.e. those that are declared as enumerable).
                                                    
                                                    @method createSafeProxy
                                                    @for Object
                                                    @param {Boolean} [canDestroy=false]
                                                                     States if the proxy consumer has the authority to call destroy 
                                                                     on the original object;<br>
                                                                     We assume the convention that object's uses destroy method
                                                                     as their destructor.
                                                    @return {Object} A proxy wrapping this object.
                                                    @throws  Any exception the original object pseudo-constructor might throw.
		*/
		Object.prototype.createSafeProxy = function(canDestroy){
		    var property;
		    var proxy = Object.create(null);
		    var obj = this; //We must retain the "this" pointer to the current object to use it inside different contexts
                
		    for (property in obj){
			//DO NOT check hasOwnProperty: the proxy must work for obj's prototype methods as well
			//ONLY enumerable methods will be added to proxy's interface
			if (Object.isFunction(obj[property])){
                        
			    //If it's a method not marked as protected, it is added to the proxy interface;
			    proxy[property] = ( function(p){
				    return  function(){
					var result;
					if (obj){
					    result = obj[p].apply(obj, Array.prototype.slice.apply(arguments, [0]));
					    //Special care is needed to support method chaining
					    if (result === obj){
						//obj.property returns obj itself, but we must return this pro                      the object has been already destroyed";
					    }
                
					    //Adds a wrappi                                        obj clear){
					    /s to be cleared,
						 rray} This array.
					lemen         };
				}
				@param {Ob @tlen    /**
						       n the aretumen};
						       }                                      
                                                                       }else{
                                                        n = Math.min(n, len);
                                                    }
                           
                                        }

                                                return res;
                                  n the maximum element of an array.
                                        
                                        @method max
                                        @fon that, given any element e maximum vArray.prototype.max = function(extrac};
					hod min
					a numeric value used     arement is an array  Object.prototype.isAr     @method isString
 ject
                @param {Object} obon';
		};
        }        
	
        if (!Object.prototype.isNumber){
	/** 
                Checks if its argument is a Number.
                
 The argument to be checked.
                @return {Boolean} True <=> the object is a Number.
      }        
      
   : HH and MM must be valid, positive integers 
                                  (since it's a p     F.i. HH=23, MM=60 -> "00:00"
                @method formatTimeString
   M An int value (between 0 and 59), representing the minutes
                            
                @return {String} The properly formatted time stri       HH = (HH + Math.floor(ay(value, n)
                            Takes a value and a positive integer n                                             primitive (immutable) values                            
                            @method fillArray
                            @for ChartUtils
                            @param {String|Number} value The value to assign to eac>
                                              Must be a positive integer.
                            @return {Anot positive.

						    */
					fillArray:  function(value, n){
					n = parseIn            }

					var i, res = new Array(n);
					if (Function.isFunction(valu                  }                            
					    }else{
						for (i = 0; i < n; i++){
                 
						    r HH:MM
                
                @method validateTimeString
               </ul>
              */                        
							validateTimeString:     function(timeString){
							if (!TIME_REGEX                       }//else, the formatting is fine,      if (v[0] >= 24 || v[1] >= 60){
						    },
                        
							If it is so, sums them and returns a new string representing
                the resultiring to be added
							    @param {String} timeString_2 The second time string to be added                         gs:     function(timeString_1, timeString_2){
							    var t1 = this.validateTimeString(timeStr throw "Invalid Argument: timeString_1";
											     }
								var t2 = this.validate                   t1[1] += t2[1];
							    t1[0] += t2[0];ToTimeString(timeString, minutes)
            
                  @for ChartUtils                
		      @return {String} A string representation of the sum of theher input fails to validate
              */
					   addIntToTimeString:     function(timeString, minutes){
								var t = this.validateTimeString(timeString);          if (!t){
								    throw "Invalid Argument: minutes";
								    nutes;
                                    
								    return formatTimeString(t[0], t[1]);  
                        